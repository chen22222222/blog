<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一次博客搭建过程</title>
      <link href="/posts/82084c25.html"/>
      <url>/posts/82084c25.html</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的第一篇文章。2024年11月14日16:29:58更新啦！</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>你好，欢迎来到我的博客。</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>想知道如何快速搭建一个博客？</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>下面是我的博客搭建过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码部分</span><br></pre></td></tr></table></figure><p>更多: <a href="https://blog.csdn.net/qq_74035288/article/details/143231824?fromshare=blogdetail&sharetype=blogdetail&sharerId=143231824&sharerefer=PC&sharesource=qq_74035288&sharefrom=from_link">详见csdn博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cryptotool/index.html"/>
      <url>/cryptotool/index.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>在线加解密工具</title>    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>    <style>        /* 设置输入框、按钮等元素样式 */        input, select, button {            padding: 10px;            margin: 10px 0;            width: 100%;            max-width: 400px;        }        button {            background-color: #007BFF;            color: white;            border: none;            cursor: pointer;        }        button:hover {            background-color: #0056b3;        }        .result {            margin-top: 20px;            font-weight: bold;        }    </style></head><body>    <h1>在线加解密工具</h1>        <label for="algorithm">选择加密算法：</label>    <select id="algorithm">        <option value="AES">AES</option>        <option value="DES">DES</option>        <option value="RC4">RC4</option>    </select>    <br>    <label for="inputData">输入数据：</label>    <input id="inputData" type="text" placeholder="在此输入需要加解密的数据">    <br>    <label for="inputKey">输入密钥：</label>    <input id="inputKey" type="text" placeholder="在此输入密钥">    <button onclick="encryptData()">加密</button>    <button onclick="decryptData()">解密</button>    <div class="result">        <p>结果：</p>        <p id="output"></p>    </div>    <script>        function encryptData() {            const algorithm = document.getElementById("algorithm").value;            const data = document.getElementById("inputData").value;            const key = document.getElementById("inputKey").value;            let encrypted = "";            try {                if (algorithm === "AES") {                    const aesKey = CryptoJS.enc.Utf8.parse(key);                    encrypted = CryptoJS.AES.encrypt(data, aesKey, {                        mode: CryptoJS.mode.ECB,                        padding: CryptoJS.pad.Pkcs7                    }).toString();                } else if (algorithm === "DES") {                    const desKey = CryptoJS.enc.Utf8.parse(key);                    encrypted = CryptoJS.DES.encrypt(data, desKey, {                        mode: CryptoJS.mode.ECB,                        padding: CryptoJS.pad.Pkcs7                    }).toString();                } else if (algorithm === "RC4") {                    encrypted = CryptoJS.RC4.encrypt(data, key).toString();                }                document.getElementById("output").innerText = `加密结果：${encrypted}`;            } catch (error) {                document.getElementById("output").innerText = "加密失败，请检查输入！";            }        }        function decryptData() {            const algorithm = document.getElementById("algorithm").value;            const data = document.getElementById("inputData").value;            const key = document.getElementById("inputKey").value;            let decrypted = "";            try {                if (algorithm === "AES") {                    const aesKey = CryptoJS.enc.Utf8.parse(key);                    decrypted = CryptoJS.AES.decrypt(data, aesKey, {                        mode: CryptoJS.mode.ECB,                        padding: CryptoJS.pad.Pkcs7                    }).toString(CryptoJS.enc.Utf8);                } else if (algorithm === "DES") {                    const desKey = CryptoJS.enc.Utf8.parse(key);                    decrypted = CryptoJS.DES.decrypt(data, desKey, {                        mode: CryptoJS.mode.ECB,                        padding: CryptoJS.pad.Pkcs7                    }).toString(CryptoJS.enc.Utf8);                } else if (algorithm === "RC4") {                    decrypted = CryptoJS.RC4.decrypt(data, key).toString(CryptoJS.enc.Utf8);                }                document.getElementById("output").innerText = `解密结果：${decrypted}`;            } catch (error) {                document.getElementById("output").innerText = "解密失败，请检查输入！";            }        }    </script>    </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;     overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/test/index.html"/>
      <url>/test/index.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>在线加解密工具</title>    <style>        body {            margin: 0;            padding: 0;            font-family: Arial, sans-serif;        }        /* 整体布局 */        .container {            display: flex;            flex-direction: row;            margin: 20px;        }        .header {            text-align: center;            padding: 20px 0;            background: rgba(255, 255, 255, 0); /* 背景透明 */            border-bottom: 2px solid #e0e0e0;        }        .header h1 {            margin: 0;            font-size: 24px;            color: #000306;        }        .sidebar {            width: 25%;            padding: 20px;            border-right: 2px solid #e0e0e0;            background: rgba(255, 255, 255, 0.7); /* 半透明背景 */            border-radius: 8px;        }        .main-content {            flex: 1;            padding: 20px;        }        /* 算法选择模块 */        .algorithm-category {        margin-bottom: 20px;    }    .algorithm-category h4 {        font-size: 18px;        color: #333;        margin-bottom: 10px;        border-bottom: 1px solid #ddd;        padding-bottom: 5px;    }    .algorithm-list {        list-style: none;        padding: 0;        margin: 0;    }    .algorithm-list li {        margin-bottom: 8px;    }    .algorithm-list li a {        text-decoration: none;        font-size: 16px;        color: #007BFF;        cursor: pointer;    }    .algorithm-list li a:hover {        color: #0056b3;    }        /* 输入模块和参数模块 */        .form-group {            margin-bottom: 20px;        }        .form-group label {            display: block;            margin-bottom: 5px;            font-weight: bold;        }        .form-group input, .form-group textarea {            width: 100%;            padding: 10px;            font-size: 14px;            border: 1px solid #ddd;            border-radius: 4px;            box-sizing: border-box;        }        .form-group textarea {            resize: none;        }        .buttons {            display: flex;            gap: 10px;        }        button {            padding: 10px 20px;            background-color: #007BFF;            color: white;            border: none;            border-radius: 4px;            cursor: pointer;        }        button:hover {            background-color: #0056b3;        }        .output {            margin-top: 20px;            font-weight: bold;            background-color: #f1f1f1;            padding: 10px;            border-radius: 4px;        }    </style></head><body>    <!-- 页面标题 -->    <div class="header">        <h1>在线加解密工具</h1>    </div>    <!-- 主体布局 -->    <div class="container">        <div class="sidebar">            <h3>选择加解密算法</h3>            <!-- 古典密码部分 -->            <div class="algorithm-category">                <h4>古典密码</h4>                <ul class="algorithm-list">                    <li><a onclick="selectAlgorithm('affine')">Affine 仿射密码</a></li>                    <li><a onclick="selectAlgorithm('hill')">Hill 密码</a></li>                    <li><a onclick="selectAlgorithm('keyed_sub')">单表代替 密码</a></li>                    <li><a onclick="selectAlgorithm('playfair')">Playfair 密码</a></li>                    <li><a onclick="selectAlgorithm('vigenere')">Vigenère 维几尼亚密码</a></li>                </ul>            </div>                    <!-- 对称密码部分 -->            <div class="algorithm-category">                <h4>对称密码</h4>                <ul class="algorithm-list">                    <li><a onclick="selectAlgorithm('aes')">AES 算法</a></li>                    <li><a onclick="selectAlgorithm('des')">DES 算法</a></li>                    <li><a onclick="selectAlgorithm('sm4')">SM4 算法</a></li>                    <li><a onclick="selectAlgorithm('rc4')">RC4 算法</a></li>                    <li><a onclick="selectAlgorithm('zuc')">祖冲之 算法</a></li>                </ul>            </div>                    <!-- 散列算法部分 -->            <div class="algorithm-category">                <h4>散列算法</h4>                <ul class="algorithm-list">                    <li><a onclick="selectAlgorithm('sha1')">SHA-1 哈希</a></li>                    <li><a onclick="selectAlgorithm('sm3')">SM3 哈希</a></li>                </ul>            </div>        </div>        <!-- 右侧内容区域 -->        <div class="main-content">            <h3>在线加解密操作</h3>            <!-- 当前选择的算法 -->            <div id="algorithm-info" class="form-group">                <label>当前选择的算法：</label>                <p id="current-algorithm">请从左侧选择算法</p>                <div id="algorithm-tip" style="margin-top: 10px; font-size: 14px; color: #555;">                    <!-- 动态显示的提示内容 -->                    请选择一种算法以查看其简介或提示。                </div>            </div>            <!-- 输入明文模块 -->            <div class="form-group">                <label for="plaintext">输入明文（默认对字符采用UTF-8编码）：</label>                <textarea id="plaintext" rows="4" placeholder="请输入需要加解密的明文"></textarea>            </div>            <!-- 参数设置模块 -->            <div id="parameters" class="form-group">                <label for="key">输入密钥（默认对字符采用UTF-8编码）：</label>                <textarea id="key" rows="4" placeholder="请输入密钥"></textarea>            </div>            <!-- 输出密文模块 -->            <div class="form-group">                <label for="output">输出结果：</label>                <textarea id="output" rows="4" readonly></textarea>            </div>            <!-- 操作按钮 -->            <div class="form-group buttons">                <button onclick="encrypt()">加密</button>                <button onclick="decrypt()">解密</button>            </div>        </div>    </div>    <script>        const backendUrl = "https://flask-backend-cwc0.onrender.com/"; // 线上服务的 URL 地址//        const backendUrl = "http://127.0.0.1:5000"; // 后端本地测试地址        let selectedAlgorithm = "";        const algorithmTips = {            affine: "输入明文格式：26个英文字母 eg. china\n输入密钥格式：两个整数，空格分隔 eg. 7 3\n（两个整数的第一个整数与26互质时，才可解密）\nAffine 加密是一种古典加密方法，通过线性变换对明文进行加密，需要两个密钥（加法密钥和乘法密钥）。",            hill: "输入明文格式：26个英文字母 eg. hi\n输入密钥格式：一个矩阵，每一行每个元素用空格分隔，每一行之间用英文逗号分隔,最后用%加上填充字符, eg. 11 8,3 7%a（注：解密时不需要填充字符，所以需去掉%a）\nHill 密码要求将明文分成固定长度的分组（最后一个分组可能需要填充)，每个分组整体加密变换。",            keyed_sub: "输入明文格式：26个英文字母 eg.hello world!\n输入密钥格式：一个字符串，长度必须小于等于明文长度 eg.key\n单表代替密码，通过指定的替换表对字符进行替换。",            playfair: "输入明文格式：26个英文字母 eg.playfair cipher\n输入密钥格式：一个字符串和一个填充字符，用英文逗号分隔 eg.PLAYFAIR　IS　A　DIGRAM　CIPHER,a\nPlayfair 加密是基于矩阵的双字母加密方法，主要用于提高单字母替换的安全性。",            vigenere: "输入明文格式：26个英文字母 eg.data security\n输入密钥格式：一个字符串 eg.best\nVigenère 加密是一种基于字母表的多表加密算法，使用密钥控制每个字符的替换。",            aes: "输入明文格式：任意长度字符串 eg.hello world!\n输入密钥格式：16个字符 eg.1234567890123456\nAES（高级加密标准）是一种对称加密算法，具有高安全性和高效率，适合保护敏感数据。",            des: "输入明文格式：任意长度字符串 eg.hello world!\n输入密钥格式：8个字符 eg.1234abcd\nDES（数据加密标准）是一种对称加密算法，曾广泛用于商业加密，但已被 AES 替代。",            sm4: "输入明文格式：任意长度字符串 eg.hello world!\n输入密钥格式：16个字符 eg.1234567890123456\nSM4 是中国自主研发的对称加密算法，广泛用于国内数据安全场景。",            rc4: "输入明文格式：任意长度字符串 eg.hello world!\n输入密钥格式：任意长度字符串 eg.1234abcd\nRC4 是一种流加密算法，适合快速加解密，但因安全问题逐渐被淘汰。",            sha1: "输入明文格式：一个字符串 eg.hello world!\nSHA-1 是一种哈希算法，用于生成数据的摘要，但安全性较低，已不建议使用。(单向加密，不可逆加密)",            sm3: "输入明文格式：任意长度字符串 eg.hello world!\nSM3 是中国自主研发的哈希算法，适合生成数据摘要，安全性较高。（单向加密，不可逆加密）",            zuc: "输入明文格式：一个字符串 eg.133333ACCBACBACBABCABCABCBACBABCABCABCBACBABBABCBACBABCABCB\n输入密钥格式：一个字符串和一个iv，用英文逗号分隔 eg.1111,acd\n祖冲之 序列密码算法是我国发布的商用密码算法中的序列密码算法。\n(！！！注：该加密算法时间较长，请耐心等待。！！！)",        };        // 根据算法动态更新参数提示        function updateParameterHints(algorithm) {            const parameterInput = document.getElementById("key");            if (["affine"].includes(algorithm)) {                parameterInput.placeholder = "请输入两个密钥（用空格分隔）";                parameterInput.disabled = false;            } else if (["aes", "des", "sm4"].includes(algorithm)) {                parameterInput.placeholder = "请输入一个密钥";                parameterInput.disabled = false;            } else if (algorithm === "sha1") {                parameterInput.placeholder = "散列算法无需输入密钥";                parameterInput.disabled = true;            } else if (algorithm === "sm3") {                parameterInput.placeholder = "散列算法无需输入密钥";                parameterInput.disabled = true;            } else if (algorithm === "hill"){                parameterInput.placeholder = "请输入一个密钥矩阵，一行每个元素用空格分隔，每一行之间用英文逗号分隔,最后用%加上填充字符";                parameterInput.disabled = false;            } else if (algorithm === "playfair"){                parameterInput.placeholder = "请输入密钥和规定的填充字符（用英文逗号分隔）";                parameterInput.disabled = false;            } else if (algorithm === "zuc"){                parameterInput.placeholder = "请输入一个密钥和iv（用英文逗号分隔）";                parameterInput.disabled = false;            } else{                parameterInput.placeholder = "请输入一个密钥";                parameterInput.disabled = false;            }        }        function selectAlgorithm(algorithm) {            // 更新当前选择的算法            selectedAlgorithm = algorithm;            document.getElementById("current-algorithm").innerText = algorithm + " 密码";            // 动态更新输入框的提示信息            updateParameterHints(algorithm);            // 清空所有输入框            document.getElementById("plaintext").value = ""; // 清空明文输入框            document.getElementById("key").value = "";       // 清空密钥输入框            document.getElementById("output").value = "";    // 清空输出框            // 动态更新算法提示            const tipElement = document.getElementById("algorithm-tip");            tipElement.innerText = algorithmTips[algorithm] || "暂时没有该算法的简介。";        }        // 加密操作        async function encrypt() {            // 验证输入是否完整            const data = document.getElementById("plaintext").value.trim(); // 获取明文输入            const key = document.getElementById("key").value.trim(); // 获取密钥输入            // 验证：是否选择了算法            if (!selectedAlgorithm) {                alert("请先选择加密算法！");                return;            }            // 验证：是否输入了明文            if (!data) {                alert("请输入明文数据！");                return;            }            // 验证：是否需要输入密钥            if (!["sha1", "sm3"].includes(selectedAlgorithm.toLowerCase()) && !key) {                alert("请输入密钥！");                return;            }            // 通过验证后执行加密            try {                const response = await fetch(`${backendUrl}/encrypt`, {                    method: "POST",                    headers: { "Content-Type": "application/json" },                    body: JSON.stringify({ algorithm: selectedAlgorithm, data, key }),                });                const result = await response.json();                document.getElementById("output").value = result.result || "加密失败，请检查参数！";            } catch (error) {                document.getElementById("output").value = "请求失败，请检查网络！";            }        }        // 解密操作        async function decrypt() {            // 验证输入是否完整            const data = document.getElementById("plaintext").value.trim(); // 获取明文输入            const key = document.getElementById("key").value.trim(); // 获取密钥输入            // 验证：是否选择了算法            if (!selectedAlgorithm) {                alert("请先选择解密算法！");                return;            }            // 验证：是否输入了密文            if (!data) {                alert("请输入需要解密的数据！");                return;            }            // 验证：是否需要输入密钥            if (!["sha1", "sm3"].includes(selectedAlgorithm.toLowerCase()) && !key) {                alert("请输入密钥！");                return;            }            // 通过验证后执行解密            try {                const response = await fetch(`${backendUrl}/decrypt`, {                    method: "POST",                    headers: { "Content-Type": "application/json" },                    body: JSON.stringify({ algorithm: selectedAlgorithm, data, key }),                });                const result = await response.json();                document.getElementById("output").value = result.result || "解密失败，请检查参数！";            } catch (error) {                document.getElementById("output").value = "请求失败，请检查网络！";            }        }    </script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/test/style.css"/>
      <url>/test/style.css</url>
      
        <content type="html"><![CDATA[.algorithm-categories {    display: flex;    flex-direction: column;    gap: 20px; /* 调整分类之间的间距 */}.category {    border: 1px solid #ccc; /* 添加边框 */    padding: 15px;    border-radius: 5px;}.category h3 {    margin-top: 0;    margin-bottom: 10px;    font-size: 1.2em;}.algorithm-list {    list-style: none; /* 移除列表默认的点 */    padding: 0;    margin: 0;}.algorithm-list li {    padding: 8px 12px;    cursor: pointer;}.algorithm-list li:hover {    background-color: #f0f0f0;}.algorithm-list li.selected {    background-color: #e0e0e0;    font-weight: bold;}]]></content>
      
    </entry>
    
    
  
</search>
